dataprovider package
package dataProvider;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;

import org.apache.http.params.CoreConnectionPNames;
import org.mariadb.jdbc.Statement;

import io.restassured.RestAssured;
import io.restassured.config.HttpClientConfig;
import io.restassured.config.RestAssuredConfig;

public class configReader {
	private Properties properties;
	private static configReader configReader;
	private RestAssuredConfig config;

    private configReader() {
		BufferedReader reader;
	    	String propertyFilePath = "configs//Configuration.properties";
	        try {
	            reader = new BufferedReader(new FileReader(propertyFilePath));
	            properties = new Properties();
	            try {
	                properties.load(reader);
	                reader.close();
	            } catch (IOException e) {
	                e.printStackTrace();
	            }
	        } catch (FileNotFoundException e) {
	            e.printStackTrace();
	            throw new RuntimeException("Configuration.properties not found at " + propertyFilePath);
	        }		
	}



POJO

package POJO;

public class employee {
	
	private int idn;
	private String firstname;
	private String lastname;
	
	public void setId(int id)
	{
		this.idn=id;
	}
	
	public int getId()
	{
		return idn;
	}
	
	public void setfirstName(String firstName)
	{
		this.firstname=firstName;
	}
	
	public String getfirstName()
	{
		return firstname;
	}
	
	public void setlastName(String lastName)
	{
		this.lastname=lastName;
	}
	
	public String getlastName()
	{
		return lastname;
	}

}
package runners;


import org.junit.runner.RunWith;

import io.cucumber.junit.CucumberOptions;

import io.cucumber.junit.Cucumber;

@RunWith(Cucumber.class)
@CucumberOptions(
		features ="src/test/resources/functionalTests",
		glue= {"stepDefinitons"},
			plugin = {"json:target/cucumber.json"}
//		"io.qameta.allure.cucumber4jvm.AllureCucumber4Jvm"
		)
public class TestRunner {
}
ackage stepDefinitons;


import dataProvider.configReader;
import io.cucumber.java.en.*;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;


import org.testng.*;

public class ReqTest {
	
	private static final String baseUrl =configReader.getInstance().dbconnection();
	private RequestSpecification reqspec;
	private Response response;

	@Given("Give the domain name of reqres")
	public void give_the_domain_name_of_reqres() {	
		RestAssured.baseURI=baseUrl+"api/users";
		reqspec=RestAssured.given();
	}
	
	@When("send the get request with the resource url of reqres")
	public void send_the_get_request_with_the_resource_url_of_reqres() {
		response =reqspec.get("?page=1");
	}
	
	@Then("validate the response code of reqres")
	public void validate_the_response_code_of_reqres() {
		Assert.assertEquals(200, response.getStatusCode());
		//Assert.assertEquals(response.getBody().jsonPath().get("data[0].id"),1);
	}

	@Then("validate the response code get of reqres")
	public void validate_the_response_code_get_of_reqres() {
		Assert.assertEquals(200, response.getStatusCode());
		//Assert.assertEquals(response.getBody().jsonPath().get("data.id"),2);
	}
	
	@When("send the get request with the single resource url of reqres")
	public void send_the_get_request_with_the_single_resource_url_of_reqres() {
		response =reqspec.get("/2");		
	}
	
	@When("send get request in server of reqres")
	public void send_get_request_in_server_of_reqres() {		
		response =reqspec.get("/23");
	}
	
	@Then("validate the negative response code of reqres")
	public void validate_the_negative_response_code_of_reqres() {
		Assert.assertEquals(404, response.getStatusCode());
	}

	@When("delete user in server of reqres")
	public void delete_user_in_server_of_reqres() {
		response =reqspec.delete("/2");
	}
	
	@When("Get delayed response in server of reqres")
	public void get_delayed_response_in_server_of_reqres() {
		response =reqspec.get("?delay=3");
	}


	@Then("validate the delete response code of reqres")
	public void validate_the_delete_response_code_of_reqres() {
		Assert.assertEquals(204, response.getStatusCode());
	}






}

feature
Feature: Test functionality of ReqRes Api
For sample testing we should check the functionality of ReqRes api

Scenario: Get List Users of ReqRes Api
Given Give the domain name of reqres
When send the get request with the resource url of reqres
Then validate the response code of reqres

Scenario: Get single User of ReqRes Api
Given Give the domain name of reqres
When send the get request with the single resource url of reqres
Then validate the response code get of reqres

Scenario: Get single user not found of ReqRes Api
Given Give the domain name of reqres
When send get request in server of reqres
Then validate the negative response code of reqres

Scenario: Get delayed response of ReqRes Api
Given Give the domain name of reqres
When Get delayed response in server of reqres
Then validate the response code of reqres

Scenario: delete a User of ReqRes Api
Given Give the domain name of reqres
When delete user in server of reqres
Then validate the delete response code of reqres
